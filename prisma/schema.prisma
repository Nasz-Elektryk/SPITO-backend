generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  username         String
  password         String
  totpSecret       String?
  avatar           Bytes?
  description      String?
  Roles            Roles[]
  rulesets         Ruleset[]
  LikedRules       LikedRules[]
  Token            Token[]
  Environment      Environment[]
  LikedEnvironment LikedEnvironment[]
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  name      String    @default("token")
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Roles {
  id     Int  @id @default(autoincrement())
  role   Role @default(USER)
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rule {
  id               Int                @id @default(autoincrement())
  name             String
  path             String
  description      String?
  unsafe           Boolean            @default(false)
  rulesetId        Int?
  ruleset          Ruleset?           @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  LikedRules       LikedRules[]
  EnvironmentRules EnvironmentRules[]
}

model Ruleset {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  url         String       @unique
  branch      String?
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  rulesetTags RulesetTag[]
  rules       Rule[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Tag {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  rulesetTags     RulesetTag[]
  EnvironmentTags EnvironmentTags[]
}

model RulesetTag {
  id        Int     @id @default(autoincrement())
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  rulesetId Int
  ruleset   Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
}

model LikedRules {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ruleId    Int
  rule      Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, ruleId])
}

model Environment {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  logo              Bytes?
  isPrivate         Boolean            @default(false)
  userId            Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  EnvironmentRules  EnvironmentRules[]
  EnvironmentTags   EnvironmentTags[]
  LikedEnvironments LikedEnvironment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model EnvironmentRules {
  id            Int         @id @default(autoincrement())
  environmentId Int
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  ruleId        Int
  rule          Rule        @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([environmentId, ruleId])
}

model LikedEnvironment {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  environmentId Int
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, environmentId])
}

model EnvironmentTags {
  id            Int         @id @default(autoincrement())
  environmentId Int
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  tagId         Int
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum Role {
  VERIFIED_USER
  USER
}
